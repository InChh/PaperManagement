// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using csuwf.PaperManagement.Common;
using csuwf.PaperManagement.Papers;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace csuwf.PaperManagement.Papers;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IPaperAppService), typeof(PaperClientProxy))]
public partial class PaperClientProxy : ClientProxyBase<IPaperAppService>, IPaperAppService
{
    public virtual async Task<PaperDto> GetAsync(Guid id)
    {
        return await RequestAsync<PaperDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<PaperDto>> GetListAsync(PagedSortedAndFilteredResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<PaperDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedSortedAndFilteredResultRequestDto), input }
        });
    }

    public virtual async Task<PaperDto> CreateAsync(CreateUpdatePaperDto input)
    {
        return await RequestAsync<PaperDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateUpdatePaperDto), input }
        });
    }

    public virtual async Task<PaperDto> UpdateAsync(Guid id, CreateUpdatePaperDto input)
    {
        return await RequestAsync<PaperDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(CreateUpdatePaperDto), input }
        });
    }

    public virtual async Task<PaperDto> DeleteAsync(Guid id)
    {
        return await RequestAsync<PaperDto>(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
