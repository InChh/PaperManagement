# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy frontend to server

env:
  DOTNET_VERSION: '8.x.x'                 # set this to the .NET Core version to use

on:
  push:
    paths:
      - 'src/Wf.PaperManagement.Blazor/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}



      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
          
      - name: Restore workload
        run: dotnet workload restore 
        working-directory: src/Wf.PaperManagement.Blazor

      - name: Build with dotnet
        run: dotnet build src/Wf.PaperManagement.Blazor --configuration Release

      - name: dotnet publish
        run: dotnet publish src/Wf.PaperManagement.Blazor -c Release -o ${{env.DOTNET_ROOT}}/app

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wwwroot
          path: ${{env.DOTNET_ROOT}}/app/wwwroot

  deploy:
    runs-on: ubuntu-latest 
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: wwwroot

      - name: Deploy to server
        uses: easingthemes/ssh-deploy@v2.1.1
        env:
          # 本地.ssh文件下的私钥id_rsa，存在secrets的PRIVATE_KEY中
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          # 复制操作的参数。"-avzr --delete"意味部署时清空服务器目标目录下的文件
          ARGS: "-avzr --delete" 
          # 服务器域名/IP
          REMOTE_HOST: ${{ secrets.HOST }}
          # 服务器用户名
          REMOTE_USER: "wangfu"
          SOURCE: "./"
          # 目标目录
          TARGET: '/home/wangfu/wangfu_paper_web'
          SCRIPT_BEFORE: cp /home/wangfu/wangfu_paper_web/appsettings.json ..
          SCRIPT_BEFORE_REQUIRED: "true"
          SCRIPT_AFTER: cp /home/wangfu/appsettings.json /home/wangfu/wangfu_paper_web
          SCRIPT_AFTER_REQUIRED: "true"